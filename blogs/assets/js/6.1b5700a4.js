(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{307:function(t,a,e){"use strict";e.r(a);var s=e(1),v=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"git的分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git的分支管理","aria-hidden":"true"}},[t._v("#")]),t._v(" Git的分支管理")]),t._v(" "),e("h4",{attrs:{id:"git分支-创建与合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git分支-创建与合并","aria-hidden":"true"}},[t._v("#")]),t._v(" git分支(创建与合并)")]),t._v(" "),e("p",[t._v("我们这里讲解git分支主要还是借鉴廖雪峰老师的文章，因为讲的实在是太好了。")]),t._v(" "),e("p",[t._v("每次提交，Git都把我们的版本记录串成一条时间线，这条时间线就是一个分支。如果只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。")]),t._v(" "),e("p",[t._v("一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：")]),t._v(" "),e("p",[t._v("每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：\n"),e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-1.png",alt:"dev分支"}})]),t._v(" "),e("p",[t._v("当我们新建一个分支时,例如 分支dev")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout -b dev\n")])])]),e("p",[t._v("这里git会为我们新建一个dev分支，并切换到dev分支就相当于执行命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git branch dev\n$ git checkout dev\n")])])]),e("p",[t._v("这里git所做的是，新建一个"),e("code",[t._v("dev")]),t._v("指针指向"),e("code",[t._v("master")]),t._v("相同的提交,在吧"),e("code",[t._v("HEAD")]),t._v("指向"),e("code",[t._v("dev")]),t._v("，表示当前分支在"),e("code",[t._v("dev")]),t._v("上")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-3.png",alt:"dev分支"}})]),t._v(" "),e("p",[t._v("查看所有分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git branch\n* dev\n  master\n")])])]),e("p",[e("code",[t._v("git branch")]),t._v(" 会将自己的所用分支全部打印出来，前面有"),e("code",[t._v("*")]),t._v("号的是当前分支，我们也可以从命令版中看出自己所在分支：")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-2.png",alt:"所在分支"}})]),t._v(" "),e("p",[t._v("然后我们在我们的工作区，新建一个"),e("code",[t._v("new.txt")]),t._v("文件，然后我们执行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git add new.txt\n$ git commit -m 'add new'\n")])])]),e("p",[t._v("这时我们的dev分支的时间线,要比master分支的时间线长，因为我们在dev分支下提交了"),e("code",[t._v("new.txt")]),t._v("文件。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-5.png",alt:"分支比较"}})]),t._v(" "),e("p",[t._v("这时我们切换到master分支")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout master\n")])])]),e("p",[t._v("我们可以看一下我们的工作区，master分支下是没有"),e("code",[t._v("new.txt")]),t._v("文件的。")]),t._v(" "),e("p",[t._v("如果我们想将master分支和dev分支进行合并，我们可以将master指向我们当前提交的dev就ok了")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git merge dev\n")])])]),e("p",[t._v("合并分支后我们会看到命令行中:")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-4.png",alt:"分支比较"}})]),t._v(" "),e("p",[t._v("我们这时在查看一下我们的工作区，以经有了"),e("code",[t._v("new.txt")]),t._v("文件，现在master和dev分支的内容一模一样了。")]),t._v(" "),e("p",[t._v("上面显示 "),e("code",[t._v("Fast-forward")]),t._v("Git告诉我们，这次合并是快进模式，也就是直接把master指向dev的当前提交，并不是所有的合并都是 "),e("code",[t._v("Fast-forward")]),t._v(",")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-6.png",alt:"分支比较"}})]),t._v(" "),e("p",[t._v("我们已经说了并不是所有的合并都是 "),e("code",[t._v("Fast-forward")]),t._v(",git在使用这种模式时，删除分支后，会丢掉分支信息。如果我们想要保留着个信息我们可以强制禁用"),e("code",[t._v("Fast-forward")]),t._v(" 模式，"),e("code",[t._v("git")]),t._v("会在"),e("code",[t._v("merge")]),t._v("时生成新的"),e("code",[t._v("commit")]),t._v("，这样就可以在分支历史上看出分支的信息。（也就是，加上"),e("code",[t._v("--no-ff")]),t._v("参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而"),e("code",[t._v("fast forward")]),t._v("合并就看不出来曾经做过合并）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('$ git merge --no-ff -m "off Fast-forward" dev\n')])])]),e("p",[t._v("上面的参数"),e("code",[t._v("--no-ff")]),t._v("表示禁用"),e("code",[t._v("Fast-forward")]),t._v(" 模式。不使用"),e("code",[t._v("Fast-forward")]),t._v(" 模式，git合并就是这样：")]),t._v(" "),e("p",[t._v("如果我们想把分支推送到远程仓库，我们可以这样：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git push origin master:dev\n")])])]),e("p",[t._v("上边的意思就是将master 分支下的dev分支并推送到远程仓库")]),t._v(" "),e("p",[t._v("如果我们想删除远程仓库的dev分支：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push origin :dev\n")])])]),e("p",[t._v("合并完成后如果没有冲突我们就可以放心的删除我们的文件了。下面我们会将如果有冲突怎么处理。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-8.png",alt:"分支合并"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git branch -d dev\n")])])]),e("p",[t._v("这时我们的"),e("code",[t._v("dev")]),t._v("分支就被删除了。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://webxiaoma.github.io/git/git3-7.png",alt:"分支删除"}})]),t._v(" "),e("p",[t._v("这里我想说的是，我们在开发项目是，一般"),e("code",[t._v("mater")]),t._v("分支是比较稳定的，我们尽量不在"),e("code",[t._v("mater")]),t._v("分支上进行开发，我一般我们在"),e("code",[t._v("dev")]),t._v("分支上进行开发，同时，我们每个人也有自己的分支，并时不时的往"),e("code",[t._v("dev")]),t._v("分支上提交就可以了。")]),t._v(" "),e("h4",{attrs:{id:"bug分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bug分支","aria-hidden":"true"}},[t._v("#")]),t._v(" Bug分支")]),t._v(" "),e("p",[t._v("当我们正在兴高采烈的开发项目时，突然领导说项目有个bug需要修复，这时我们手里的项目还没开发完，也没法提交，因为工作才做到一半。这时我们可以利用git把我们当前的工作现场储藏起来，等bug调完后，在恢复现场继续工作。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash\n")])])]),e("p",[t._v("现在我们用 "),e("code",[t._v("git status")]),t._v(" 查看工作区，会是干净的。")]),t._v(" "),e("p",[t._v("接下来，我们来修复bug，我们先确定在哪个分支上修复，比如在"),e("code",[t._v("master")]),t._v("分支上修复bug，我们就在"),e("code",[t._v("master")]),t._v("分支上临时建一个修复bug的分支 "),e("code",[t._v("issue")]),t._v(",修复完成后在切换到master分支然后合并，删除"),e("code",[t._v("issue")]),t._v("分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git checkout master\n$ git checkout -b issue\n\n//修复完成后\n$ git add .\n$ git commit -m 'mod bug'\n$ git checkout master\n$ git merged --no-ff -m \"mod bug\" issue\n$ git branch -d issue\n")])])]),e("p",[t._v("修改完成后，我们需要恢复我们原来的工作区,用 "),e("code",[t._v("git status")]),t._v("  查看我们的工作区状态是干净的。我们用 "),e("code",[t._v("git stash list")]),t._v(" 命令来看看我们储藏起来的工作区")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash list\nstash@{0}: WIP on dev: c10ade1 add change\n")])])]),e("p",[t._v("恢复储藏区我们有两种方法：")]),t._v(" "),e("p",[t._v("1."),e("code",[t._v("git stash apply")]),t._v(" 使用该方法恢复后，stash内容并不删除，你需要用git stash drop来删除；\n2."),e("code",[t._v("git stash pop")]),t._v(" 该方法恢复的同时把stash内容也删了")]),t._v(" "),e("p",[t._v("你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git stash apply stash@{0}\n")])])]),e("h4",{attrs:{id:"feature分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#feature分支","aria-hidden":"true"}},[t._v("#")]),t._v(" Feature分支")]),t._v(" "),e("p",[t._v("Feature分支 一般说的是我们用来添加新功能的分支，在添加新功能时，我们很少直接在master分支上进行添加的，我们会创建出一个master分支，进行操作，完成后，进行合并，再将该分支删掉。但是如果我们功能添加好了，但是没有进行合并，这时老板说不添加这个功能了，我们肯会删除该分支。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git branch -d feature-vulcan\n")])])]),e("p",[t._v("销毁这个分支时，我们会看大销毁失败。Git友情提醒，"),e("code",[t._v("feature-vulcan")]),t._v("分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。")]),t._v(" "),e("p",[t._v("那好我们就直接强制删除")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git branch -D feature-vulcan\n")])])]),e("h4",{attrs:{id:"分支对比差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支对比差异","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支对比差异")]),t._v(" "),e("p",[t._v("查看 dev 有，而 master 中没有的：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log dev ^master \n")])])]),e("p",[t._v("查看 dev 中比 master 中多提交了哪些内容")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log master..dev\n")])])]),e("p",[t._v("不知道谁提交的多谁提交的少，单纯想知道有什么不一样")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log dev...master\n")])])]),e("p",[t._v("在上述情况下，再显示出每个提交是在哪个分支上")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log --left-right dev...master\n")])])])])}],!1,null,null,null);v.options.__file="Git的分支管理.md";a.default=v.exports}}]);